({
	doInit : function(component, event, helper) { 
        helper.getNameSpace(component, event, helper);
        helper.getListViewFieldSet(component, event, helper);
        helper.getApplicationStages(component, event, helper);
        helper.getListRows(component, event, helper);
    },
    
    getNameSpace : function(component, event, helper) { 
    
        var action = component.get("c.getPackageNameSapce");
        action.setCallback(this, function(response) {
            var state =   response.getState();
            if(state === "SUCCESS"){
                component.set("v.nameSpace", response.getReturnValue());                    
            }
             helper.toggleLoadSpinner(component);
        })
        $A.enqueueAction(action);
    },
 
    
    showMoreClick : function(component, event, helper) {
        helper.toggleLoadSpinner(component); 
        var pageIndex = component.get("v.pageIndex");
        pageIndex++;
        component.set("v.pageIndex", pageIndex);
		helper.getListRows(component, event, helper);        
    },
    
    toggleLoadSpinner: function (component) {
        var spinner = component.find("loadSpinner");
        $A.util.toggleClass(spinner, "slds-hide");
        console.log('here');
    },
    
    applyStageFilter : function(component, event, helper) {
        helper.toggleLoadSpinner(component); 
        var selectedValue = event.getParam("value");
        if(selectedValue != '' && selectedValue != null){
            component.set("v.filterValue", selectedValue);
            component.set("v.pageIndex", 1);
            helper.resetPageIndex(component);
        }
        helper.getListRows(component, event, helper);
    },
    
    resetPageIndex : function(component) {
        component.set("v.pageIndex", 1);
    },
 
    getListViewFieldSet : function(component, event, helper) {
        var action = component.get("c.getApplicationFieldSet");
        action.setParams({
            sObjectName: 'Application_V2__c',
            fieldSetName: 'Lightning_List_Tab'
    	});
 
        action.setCallback(this, function(response) {
            var state =   response.getState();
            if(state === "SUCCESS"){
                var fieldSetObj = JSON.parse(response.getReturnValue());
                component.set("v.fieldSetMemebers", fieldSetObj);                
            }
        })
        $A.enqueueAction(action);
    },
 
    getListRows : function(component, event, helper){
		var pageIndex = component.get("v.pageIndex");
        var isUpdate = component.get("v.isUpdate");
            console.log('isUpdate', isUpdate);
        var action = component.get("c.getListViewRecords");
        action.setParams({
            parentRecordId: component.get("v.recordId"),
            stage: component.get("v.filterValue"),
            pageIndex: ''+pageIndex,
            isUpdate: ''+isUpdate,
        });
        action.setCallback(this, function(response) {
            var state =   response.getState();
            if(state === "SUCCESS"){
                var recordList = [];
                component.set("v.listHasValue", true);
                component.set("v.hasShowMore", true);
                if(pageIndex>1 && !isUpdate){
                     recordList = component.get("v.tableRecords");
                }
                var list = JSON.parse(response.getReturnValue());
                recordList = recordList.concat(helper.createTableRows(component.get("v.nameSpace"), list, helper));
                component.set("v.tableRecords", recordList);
                if(list.length == 0){
                    component.set("v.hasShowMore", false);
                }
                if(recordList.length == 0){
                    component.set("v.listHasValue", false);
                    component.set("v.hasShowMore", false);
                }
                
            }else if (state === "ERROR") {
                var errors = response.getError();
                if (errors) {
                    if (errors[0] && errors[0].message) {
                        helper.notifyError(errors[0].message, helper);
                    }
                } else {
                    helper.notifyError('Internal Server Error', helper);
                }
            }
            component.set("v.isUpdate", false);
            helper.toggleLoadSpinner(component);            
        });
        $A.enqueueAction(action);
    },
 
    createTableRows : function(nameSpace, recordList, helper){
 		var tableData = [];
        recordList.forEach(function(app) {
            tableData.push({
                currentSatge : app[nameSpace+'Stage__c'],
                rejected : app[nameSpace+'Reject__c'],
                candidateId : app[nameSpace+'Applicant__c'],
                candidateName : helper.getApplicantName(nameSpace, app),
                record : Object.assign({}, app)
            });
        });
        return tableData;
    },
    getApplicantName :  function(nameSpace, data){
		
		if(data[nameSpace+'Applicant__c'] != ''){
            return data[nameSpace+'Applicant__r'].Name;
        }          
        return '';
    },                        
    
    getApplicationStages: function(component, event, helper) {
        // get server side method
        var action = component.get("c.getApplicationStageValues"); 
        // set the callback function        
        action.setCallback(this, function(response) {
            var state =   response.getState();
            if(state === "SUCCESS"){
                component.set("v.appStages", response.getReturnValue());
            }
        });
        // execute server side action
        $A.enqueueAction(action);   
    },
    
    resetSelectAll : function(component){
        component.find("cboxAll").set("v.value", false);
    },
    
    updateApplicationStages: function(component, event, helper) {
        
        var selectedStage = event.getParam("doAction");
        var getCheckAllId = component.find("cboxRow");
        
        var selctedRec = [];
        for (var i = 0; i < getCheckAllId.length; i++) {             
            if(getCheckAllId[i].get("v.value") == true ){
                if(component.find("cboxRow")[i].get("v.class") == 'rejected'){
                    helper.notifyError('Mass Action(s) disabled, rejected applications are selected', helper);
                    return;
                }
 				selctedRec.push(getCheckAllId[i].get("v.text"));
            }
        }
        
    	// get server side method
        if(selctedRec.length < 1){
            component.set("v.isError", 'true');
            //helper.doInit(component, event, helper);            
            return;
        }
        helper.toggleLoadSpinner(component); 
        var action = component.get("c.updateApplicationStatus"); 
    	action.setParams({
            stage: selectedStage,
            applications: selctedRec,           
        });
        // set the callback function        
        action.setCallback(this, function(response) {
            var state =   response.getState();
            if(state === "SUCCESS"){
                component.set("v.isUpdate", true);
                helper.getListRows(component, event, helper);
            }else if (state === "INCOMPLETE") {
                helper.notifyError('Internal Server Error', helper);
            }else if (state === "ERROR") {
                var errors = response.getError();
                if (errors) {
                    if (errors[0] && errors[0].message) {
                        helper.notifyError(errors[0].message, helper);
                    }
                } else {
                    helper.notifyError('Internal Server Error', helper);
                }
            }
            helper.resetSelectAll(component);
        });
        // execute server side action
        $A.enqueueAction(action);   
    },
    
    validateRejected : function(component) {
        var getCheckAll = component.find("cboxRow");
        for (var i = 0; i < getCheckAll.length; i++) {
            if(component.find("cboxRow")[i].get("v.class") == 'rejected'){
            	return true;
            }         
        }  
        return false;
    },
    
    refreshSelectedApplication : function(component, event, helper) {
        helper.toggleLoadSpinner(component);
        helper.resetPageIndex(component);
        helper.getListRows(component, event, helper);
    },
    
    rejectSelectedApplication : function(component, event, helper) {
        
        var getCheckAllId = component.find("cboxRow");
        var selctedRec = [];
        for (var i = 0; i < getCheckAllId.length; i++) {             
            if(getCheckAllId[i].get("v.value") == true ){
                if(component.find("cboxRow")[i].get("v.class") == 'rejected'){
                    helper.notifyError('Mass Action(s) disabled, rejected applications are selected', helper);
                    return;
                }
 				selctedRec.push(getCheckAllId[i].get("v.text"));
            }
        }
        
    	// get server side method
        if(selctedRec.length < 1){
            component.set("v.isError", 'true');
            //helper.doInit(component, event, helper);            
            return;
        }
        helper.toggleLoadSpinner(component);
        var action = component.get("c.rejectSelected"); 
    	action.setParams({
            applications: selctedRec           
        });
        // set the callback function        
        action.setCallback(this, function(response) {
            var state =   response.getState();
            if(state === "SUCCESS"){
                component.set("v.isUpdate", true);
                helper.getListRows(component, event, helper);
            }else if (state === "ERROR") {
                var errors = response.getError();
                if (errors) {
                    if (errors[0] && errors[0].message) {
                        helper.notifyError(errors[0].message, helper);
                    }
                } else {
                    helper.notifyError('Internal Server Error', helper);
                }
            }
            helper.resetSelectAll(component);
        });
        // execute server side action
        $A.enqueueAction(action);   
    },
    
    notifyError : function(message, helper){
        helper.showEventToast(message, 'error', 'sticky');
    },
    
    notifyWarning : function(message, helper){
        helper.showEventToast(message, 'warning', 'dismissible');
    },
    
    notifySuccess : function(message, helper){
        helper.showEventToast(message, 'success', 'pester');
    },
    
    showEventToast : function(message, type, mode) {
        var toastEvent = $A.get("e.force:showToast");
        toastEvent.setParams({
            mode: mode != '' ? mode : 'sticky',
            message: message,
            type: type != '' ? type : 'success',
        });
        toastEvent.fire();
    }
})